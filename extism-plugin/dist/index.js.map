{
  "version": 3,
  "sources": ["../src/index.ts", "../src/pdk.ts", "../src/handlers/docs.ts", "../src/main.ts"],
  "sourcesContent": ["/**\n * Entry point for the Google Drive/Docs Extism Plugin.\n * Handles tool descriptions and routing tool calls to appropriate handlers.\n */\nimport * as main from \"./main\";\n\nimport { CallToolRequest, CallToolResult, ListToolsResult } from \"./pdk\";\n\n/**\n * Called by Extism to describe the tools provided by this plugin.\n * @returns 0 on success\n */\nexport function describe(): number {\n  const output = main.describeImpl();\n\n  const untypedOutput = ListToolsResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n\n/**\n * Called by Extism when a tool is being called.\n * @returns 0 on success, 1 on error\n */\nexport function call(): number {\n  const untypedInput = JSON.parse(Host.inputString());\n  const input = CallToolRequest.fromJson(untypedInput);\n\n  const output = main.callImpl(input);\n\n  const untypedOutput = CallToolResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n} ", "/**\n * Types for the Plugin Development Kit (PDK)\n * These types define the interface between the Extism runtime and the plugin.\n */\n\n/**\n * Request to call a specific tool\n */\nexport class CallToolRequest {\n  toolId: string;\n  arguments: Record<string, any>;\n  \n  constructor(toolId: string, arguments_: Record<string, any>) {\n    this.toolId = toolId;\n    this.arguments = arguments_;\n  }\n  \n  static fromJson(json: any): CallToolRequest {\n    return new CallToolRequest(json.toolId, json.arguments || {});\n  }\n  \n  static toJson(request: CallToolRequest): any {\n    return {\n      toolId: request.toolId,\n      arguments: request.arguments\n    };\n  }\n}\n\n/**\n * Result of calling a tool\n */\nexport class CallToolResult {\n  state: string;\n  result: any;\n  error?: string;\n  \n  constructor(state: string, result: any, error?: string) {\n    this.state = state;\n    this.result = result;\n    this.error = error;\n  }\n  \n  static fromJson(json: any): CallToolResult {\n    return new CallToolResult(json.state, json.result, json.error);\n  }\n  \n  static toJson(result: CallToolResult): any {\n    const json: any = {\n      state: result.state,\n      result: result.result\n    };\n    if (result.error) {\n      json.error = result.error;\n    }\n    return json;\n  }\n}\n\n/**\n * Tool description\n */\nexport class Tool {\n  id: string;\n  label: string;\n  description: string;\n  parameters: Record<string, any>;\n  \n  constructor(id: string, label: string, description: string, parameters: Record<string, any>) {\n    this.id = id;\n    this.label = label;\n    this.description = description;\n    this.parameters = parameters;\n  }\n  \n  static fromJson(json: any): Tool {\n    return new Tool(\n      json.id,\n      json.label,\n      json.description,\n      json.parameters || {}\n    );\n  }\n  \n  static toJson(tool: Tool): any {\n    return {\n      id: tool.id,\n      label: tool.label,\n      description: tool.description,\n      parameters: tool.parameters\n    };\n  }\n}\n\n/**\n * Result of listing available tools\n */\nexport class ListToolsResult {\n  tools: Tool[];\n  \n  constructor(tools: Tool[]) {\n    this.tools = tools;\n  }\n  \n  static fromJson(json: any): ListToolsResult {\n    const tools = (json.tools || []).map((t: any) => Tool.fromJson(t));\n    return new ListToolsResult(tools);\n  }\n  \n  static toJson(result: ListToolsResult): any {\n    return {\n      tools: result.tools.map(t => Tool.toJson(t))\n    };\n  }\n} ", "/**\n * Handlers for Google Drive/Docs operations in the Extism plugin.\n * Uses the Host and Http globals that are injected by the Extism runtime.\n */\n\n// Do NOT import Host or Http at the top level\u2014assume they are injected as globals.\n\n/**\n * Parses JSON input from the Host and returns the arguments as an object.\n * On failure, outputs an error message and returns null.\n * @returns Parsed arguments object or null if parsing fails\n */\nfunction getArgs(): any | null {\n  try {\n    const input = Host.inputString();\n    const args = JSON.parse(input);\n    return args;\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid JSON input\" }));\n    return null;\n  }\n}\n\n/**\n * Handles searching for Google Docs in Drive.\n * @returns 0 on success, 1 on error\n */\nexport function handleSearchDocs(): number {\n  const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { query, maxResults = 10 } = args;\n\n  // Validate required parameters\n  if (!query) {\n    Host.outputString(\n      JSON.stringify({\n        error: \"Missing required parameter: query\"\n      })\n    );\n    return 1;\n  }\n\n  // Build search query\n  // mimeType='application/vnd.google-apps.document' restricts to Google Docs only\n  const queryParam = encodeURIComponent(`mimeType='application/vnd.google-apps.document' and ${query}`);\n  const maxResultsParam = `&pageSize=${maxResults}`;\n  const fieldsParam = '&fields=files(id,name,description,createdTime,modifiedTime,webViewLink)';\n\n  const response = Http.request({\n    url: `https://www.googleapis.com/drive/v3/files?q=${queryParam}${maxResultsParam}${fieldsParam}`,\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to search docs: ${response.body}` })\n    );\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(\n      JSON.stringify({ error: \"Invalid response from Google Drive API\" })\n    );\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify(data.files, null, 2));\n  return 0;\n}\n\n/**\n * Handles creating a new Google Doc.\n * @returns 0 on success, 1 on error\n */\nexport function handleCreateDoc(): number {\n  const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { title, content = \"\", parentFolderId } = args;\n\n  // Validate required parameters\n  if (!title) {\n    Host.outputString(\n      JSON.stringify({\n        error: \"Missing required parameter: title\"\n      })\n    );\n    return 1;\n  }\n\n  // First, create an empty Google Doc\n  const metadataResponse = Http.request({\n    url: \"https://www.googleapis.com/drive/v3/files\",\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  }, JSON.stringify({\n    name: title,\n    mimeType: \"application/vnd.google-apps.document\",\n    ...(parentFolderId ? { parents: [parentFolderId] } : {})\n  }));\n\n  if (metadataResponse.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to create document: ${metadataResponse.body}` })\n    );\n    return 1;\n  }\n\n  let docData;\n  try {\n    docData = JSON.parse(metadataResponse.body);\n  } catch (err) {\n    Host.outputString(\n      JSON.stringify({ error: \"Invalid response from Google Drive API\" })\n    );\n    return 1;\n  }\n\n  const documentId = docData.id;\n\n  // If content is provided, update the doc with the content\n  if (content) {\n    const updateResponse = Http.request({\n      url: `https://docs.googleapis.com/v1/documents/${documentId}:batchUpdate`,\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }, JSON.stringify({\n      requests: [\n        {\n          insertText: {\n            location: {\n              index: 1\n            },\n            text: content\n          }\n        }\n      ]\n    }));\n\n    if (updateResponse.status !== 200) {\n      Host.outputString(\n        JSON.stringify({ error: `Failed to populate document content: ${updateResponse.body}` })\n      );\n      return 1;\n    }\n  }\n\n  Host.outputString(\n    JSON.stringify({\n      id: documentId,\n      title: title,\n      message: \"Document created successfully\",\n      url: `https://docs.google.com/document/d/${documentId}/edit`\n    }, null, 2)\n  );\n  return 0;\n}\n\n/**\n * Handles appending content to an existing Google Doc.\n * @returns 0 on success, 1 on error\n */\nexport function handleAppendToDoc(): number {\n  const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { documentId, content } = args;\n\n  // Validate required parameters\n  if (!documentId || !content) {\n    Host.outputString(\n      JSON.stringify({\n        error: \"Missing required parameters: documentId and content are required\"\n      })\n    );\n    return 1;\n  }\n\n  // First, get the document to find the end position\n  const getDocResponse = Http.request({\n    url: `https://docs.googleapis.com/v1/documents/${documentId}`,\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n\n  if (getDocResponse.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to get document: ${getDocResponse.body}` })\n    );\n    return 1;\n  }\n\n  let docData;\n  try {\n    docData = JSON.parse(getDocResponse.body);\n  } catch (err) {\n    Host.outputString(\n      JSON.stringify({ error: \"Invalid response from Google Docs API\" })\n    );\n    return 1;\n  }\n\n  const endIndex = docData.body.content[docData.body.content.length - 1].endIndex || 1;\n\n  // Append content at the end of the document\n  const updateResponse = Http.request({\n    url: `https://docs.googleapis.com/v1/documents/${documentId}:batchUpdate`,\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  }, JSON.stringify({\n    requests: [\n      {\n        insertText: {\n          location: {\n            index: endIndex - 1\n          },\n          text: content\n        }\n      }\n    ]\n  }));\n\n  if (updateResponse.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to append content: ${updateResponse.body}` })\n    );\n    return 1;\n  }\n\n  Host.outputString(\n    JSON.stringify({\n      documentId: documentId,\n      message: \"Content appended successfully\",\n      url: `https://docs.google.com/document/d/${documentId}/edit`\n    }, null, 2)\n  );\n  return 0;\n}\n\n/**\n * Handles updating content in an existing Google Doc.\n * @returns 0 on success, 1 on error\n */\nexport function handleUpdateDoc(): number {\n  const accessToken = Config.get(\"GOOGLE_ACCESS_TOKEN\");\n\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { documentId, content, startIndex = 1, endIndex } = args;\n\n  // Validate required parameters\n  if (!documentId || !content) {\n    Host.outputString(\n      JSON.stringify({\n        error: \"Missing required parameters: documentId and content are required\"\n      })\n    );\n    return 1;\n  }\n\n  // If no endIndex specified, first get the document to find content to replace\n  let finalEndIndex = endIndex;\n  if (!finalEndIndex) {\n    const getDocResponse = Http.request({\n      url: `https://docs.googleapis.com/v1/documents/${documentId}`,\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n\n    if (getDocResponse.status !== 200) {\n      Host.outputString(\n        JSON.stringify({ error: `Failed to get document: ${getDocResponse.body}` })\n      );\n      return 1;\n    }\n\n    let docData;\n    try {\n      docData = JSON.parse(getDocResponse.body);\n    } catch (err) {\n      Host.outputString(\n        JSON.stringify({ error: \"Invalid response from Google Docs API\" })\n      );\n      return 1;\n    }\n\n    finalEndIndex = docData.body.content[docData.body.content.length - 1].endIndex || 1;\n  }\n\n  // Update the document with new content\n  const updateResponse = Http.request({\n    url: `https://docs.googleapis.com/v1/documents/${documentId}:batchUpdate`,\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    }\n  }, JSON.stringify({\n    requests: [\n      {\n        // First delete the content in the specified range\n        deleteContentRange: {\n          range: {\n            startIndex: startIndex,\n            endIndex: finalEndIndex\n          }\n        }\n      },\n      {\n        // Then insert the new content\n        insertText: {\n          location: {\n            index: startIndex\n          },\n          text: content\n        }\n      }\n    ]\n  }));\n\n  if (updateResponse.status !== 200) {\n    Host.outputString(\n      JSON.stringify({ error: `Failed to update document: ${updateResponse.body}` })\n    );\n    return 1;\n  }\n\n  Host.outputString(\n    JSON.stringify({\n      documentId: documentId,\n      message: \"Document updated successfully\",\n      url: `https://docs.google.com/document/d/${documentId}/edit`\n    }, null, 2)\n  );\n  return 0;\n} ", "/**\n * Main implementation for the Google Drive/Docs Extism Plugin.\n * This file contains the core implementation that processes the requests from the host.\n */\nimport { CallToolRequest, CallToolResult, ListToolsResult, Tool } from \"./pdk\";\n\nimport {\n  handleSearchDocs,\n  handleCreateDoc,\n  handleAppendToDoc,\n  handleUpdateDoc,\n} from \"./handlers/docs\";\n\n/**\n * Implementation of the call function that routes requests to the appropriate handler.\n * @param request The request to process\n * @returns The result of processing the request\n */\nexport function callImpl(request: CallToolRequest): CallToolResult {\n  try {\n    // Set up input for the handlers\n    const originalInputString = Host.inputString;\n    let outputContent: string = \"\";\n\n    // Override Host.inputString and Host.outputString for the handlers\n    Host.inputString = () => JSON.stringify(request.arguments);\n    const originalOutputString = Host.outputString;\n    Host.outputString = (content: string) => {\n      outputContent = content;\n      return content;\n    };\n\n    let result: number = 1;\n\n    // Route the request to the appropriate handler based on the toolId\n    switch (request.toolId) {\n      case \"search_docs\":\n        result = handleSearchDocs();\n        break;\n\n      case \"create_doc\":\n        result = handleCreateDoc();\n        break;\n\n      case \"append_to_doc\":\n        result = handleAppendToDoc();\n        break;\n\n      case \"update_doc\":\n        result = handleUpdateDoc();\n        break;\n\n      default:\n        // Restore original methods\n        Host.inputString = originalInputString;\n        Host.outputString = originalOutputString;\n        return new CallToolResult(\n          \"error\",\n          null,\n          `Unknown tool: ${request.toolId}`\n        );\n    }\n\n    // Restore original methods\n    Host.inputString = originalInputString;\n    Host.outputString = originalOutputString;\n\n    // Process result\n    if (result === 0) {\n      try {\n        const parsedOutput = JSON.parse(outputContent);\n        return new CallToolResult(\"success\", parsedOutput, undefined);\n      } catch (e) {\n        return new CallToolResult(\"success\", outputContent, undefined);\n      }\n    } else {\n      try {\n        const parsedError = JSON.parse(outputContent);\n        return new CallToolResult(\n          \"error\",\n          null,\n          parsedError.error || \"Unknown error\"\n        );\n      } catch (e) {\n        return new CallToolResult(\n          \"error\",\n          null,\n          \"Failed to process Google Drive/Docs request\"\n        );\n      }\n    }\n  } catch (err) {\n    return new CallToolResult(\n      \"error\",\n      null,\n      `Error: ${err instanceof Error ? err.message : String(err)}`\n    );\n  }\n}\n\n/**\n * Implementation of the describe function that returns the list of available tools.\n * @returns A list of available tools\n */\nexport function describeImpl(): ListToolsResult {\n  const tools: Tool[] = [\n    new Tool(\n      \"search_docs\",\n      \"Search Docs\",\n      \"Search for Google Docs in Drive\",\n      {\n        query: { \n          type: \"string\", \n          description: \"Search query string\" \n        },\n        maxResults: {\n          type: \"number\",\n          description: \"Maximum number of docs to return\",\n          optional: true,\n        },\n      }\n    ),\n    new Tool(\n      \"create_doc\",\n      \"Create Doc\",\n      \"Create a new Google Doc\",\n      {\n        title: { \n          type: \"string\", \n          description: \"Document title\" \n        },\n        content: {\n          type: \"string\",\n          description: \"Initial document content\",\n          optional: true,\n        },\n        parentFolderId: {\n          type: \"string\",\n          description: \"Parent folder ID\",\n          optional: true,\n        },\n      }\n    ),\n    new Tool(\n      \"append_to_doc\",\n      \"Append to Doc\",\n      \"Append content to an existing Google Doc\",\n      {\n        documentId: { \n          type: \"string\", \n          description: \"Document ID to update\" \n        },\n        content: { \n          type: \"string\", \n          description: \"Content to append\" \n        },\n      }\n    ),\n    new Tool(\n      \"update_doc\",\n      \"Update Doc\",\n      \"Update content in an existing Google Doc\",\n      {\n        documentId: { \n          type: \"string\", \n          description: \"Document ID to update\" \n        },\n        content: { \n          type: \"string\", \n          description: \"New document content\" \n        },\n        startIndex: {\n          type: \"number\",\n          description: \"Start index for the update\",\n          optional: true,\n        },\n        endIndex: {\n          type: \"number\",\n          description: \"End index for the update\",\n          optional: true,\n        },\n      }\n    )\n  ];\n\n  return new ListToolsResult(tools);\n} "],
  "mappings": "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",
  "names": []
}
